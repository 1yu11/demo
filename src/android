 edu.just.mqtt ;

import  android.support.v7.app.AppCompatActivity ;
import  android.os.Bundle ;
import  android.widget.Toast ;

import  org.eclipse.paho.android.service.MqttAndroidClient ;
import  org.eclipse.paho.client.mqttv3.IMqttActionListener ;
import  org.eclipse.paho.client.mqttv3.IMqttDeliveryToken ;
import  org.eclipse.paho.client.mqttv3.IMqttMessageListener ;
import  org.eclipse.paho.client.mqttv3.IMqttToken ;
import  org.eclipse.paho.client.mqttv3.MqttCallbackExtended ;
import  org.eclipse.paho.client.mqttv3.MqttConnectOptions ;
import  org.eclipse.paho.client.mqttv3.MqttException ;
import  org.eclipse.paho.client.mqttv3.MqttMessage ;

公共 类 MqttActivity  扩展 AppCompatActivity {

    MqttAndroidClient mqttAndroidClient;

    final  String serverUri =  “ tcp：//iot.eclipse.org：1883 ” ;
    String clientId =  “ ExampleAndroidClient ” ;
    final  String subscriptionTopic =  “ / edu / just / julychang / mqtt ” ;

    @覆盖
    protected  void  onCreate（Bundle  savedInstanceState）{
        超。的onCreate（savedInstanceState）;
        的setContentView（ř 。布局。 activity_mqtt）;
        //新建客户实例
        clientId = clientId +  System 。的currentTimeMillis（）;
        mqttAndroidClient =  new  MqttAndroidClient（getApplicationContext（），serverUri，clientId）;
        //设置回调函数
        mqttAndroidClient 。setCallback（new  MqttCallbackExtended（）{
            @覆盖
            public  void  connectComplete（boolean  reconnect，String  serverURI）{
            }

            @覆盖
            public  void  connectionLost（Throwable  cause）{
            }

            @覆盖
            public  void  messageArrived（String  topic，MqttMessage  message）throws  Exception {
                makeToast（新 字符串（消息。 getPayload（）））;
            }

            @覆盖
            public  void  deliveryComplete（IMqttDeliveryToken  token）{
            }
        }）;
        //连接设置，是否重连，是否清理会话
        MqttConnectOptions mqttConnectOptions =  new  MqttConnectOptions（）;
        mqttConnectOptions 。setAutomaticReconnect（true）;
        mqttConnectOptions 。setCleanSession（false）;

        尝试 {
            //连接MQTT服务器
            mqttAndroidClient 。connect（mqttConnectOptions，null，new  IMqttActionListener（）{
                @覆盖
                public  void  onSuccess（IMqttToken  asyncActionToken）{
                    makeToast（“连接成功”）;
                    //订阅话题
                    subscribeToTopic（）;
                }

                @覆盖
                public  void  onFailure（IMqttToken  asyncActionToken，Throwable  exception）{
                }
            }）;
        } catch（MqttException ex）{
            恩。的printStackTrace（）;
        }

    }

    public  void  subscribeToTopic（）{
        尝试 {
            //开始订阅
            mqttAndroidClient 。subscribe（subscriptionTopic，0，null，new  IMqttActionListener（）{
                @覆盖
                public  void  onSuccess（IMqttToken  asyncActionToken）{
                    makeToast（“成功 订阅到” + subscriptionTopic）;
                }

                @覆盖
                public  void  onFailure（IMqttToken  asyncActionToken，Throwable  exception）{
                    makeToast（“ 订阅失败” + subscriptionTopic）;
                }
            }）;

        } catch（MqttException ex）{
            恩。的printStackTrace（）;
        }
    }

    private  void  makeToast（String  str）{
        吐司。makeText（MqttActivity 。这，STR，吐司。 LENGTH_LONG）。节目（）;
    }

}
